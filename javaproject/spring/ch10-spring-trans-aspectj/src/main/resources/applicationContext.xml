<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--
    把配置数据库的配置信息，写在一个独立的文件，，编译修改数据库的配置内容
    spring知道jdbc.properties文件配置
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 声明数据源DataSource,作用是连接数据库的  -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- set注入给 DruidDataSource提供数据库链接信息-->
    <!--  使用属性配置文件中的数据，语法${key}      -->
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.name}" />
    <property name="password" value="${jdbc.password}" />
    <!--   最大连接数     -->
    <property name="maxActive" value="${jdbc.max}" />
    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--   set注入，把数据库连接池     -->
        <property name="dataSource" ref="myDataSource"/>
        <!--    mybatis主配置文件位置
            configLocation属性是Resource类型，读取配置文件 spring中的
            它的赋值，使用value，指定文件路径，使用classpath：表示文件的位置
            -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>



    <!-- 创建dao对象，使用SqlSession的getMapper(Student.class)
       MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。
       -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定 sqlSessionFactory对象的id   -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名，包名是dao接口所在的包名
                MapperScannerConfigurer会扫描这个包中的所以接口，把每个接口都i执行
                一次getMapper()方法，得到每个接口的dao对象。
                创建好的dao对象方法spring的容器中。dao对象的名称默认是 接口名首字母小写
                -->
        <property name="basePackage" value="com.suwenting.dao"/>
    </bean>



    <!-- 声明  Service -->
    <bean id="buyService" class="com.suwenting.Service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--  使用spring的事务处理:和源代码完全分离  -->
    <!--  1、声明事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--        要知道连接数据库， 指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>
        <!--
                2、声明业务方法的事务属性（隔离级别，传播行为，超时时间）
               id:自定义名称，表示<tx:advice> 和</tx:advice>直接的配置内容的
               transaction-manager:事务管理对象的id
        -->
  <tx:advice id="myAdvice" transaction-manager="transactionManager">
      <!--  tx.attributes:配置事务的属性    -->
      <tx:attributes>
            <!--    tx.method:给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
             1、name：方法名称 1）完整的方法名称，不带包和类
                             2）方法可以使用通配符，*表示任意字符
               propagation:传播行为，枚举值
               isolation:隔离级别
               rollback-for:你指定的异常类名，全限定名。发生异常一定回滚
             -->
          <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.NullPointerException,com.suwenting.excep.NotEnoughExpetion"/>
      </tx:attributes>
  </tx:advice>
    
    <aop:config>
        <!--  配置切入点表达式：指定那些包中类，要使用事务
              id:切入点表达式的名称，唯一值
              expression:切入点表达式，指定那些类要使用的事务，aspectj会创建代理对象
        -->
        
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--  配置增强器:关联advice和pointcut
            advice-ref:通知，上面tx:advice在哪里配置
            pointcut-ref:切入点表达式的id
         -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>